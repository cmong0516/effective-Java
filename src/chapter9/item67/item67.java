package chapter9.item67;

public class item67 {
    // 최적화는 신중히 하라.

    // 그 어떤 핑계보다 효율성 이라는 이름 아래 행해진 컴퓨팅 죄악이 더 많다.
    // 잘못된 최적화는 오히려 나쁜 결과를 초래한다.

    // 빠른 프로그램 보단 좋은 프로그램을 작성하라.
    // 좋은 프로그램이 원하는 성능을 내지 못한다면 그 아키텍처 자체가 최적화 할수있는 길을 안내해준다.
    // 구현상의 문제는 나중에 최적화 해줄수 있지만 아키텍처의 결함이 성능을 제한하고 있다면 시스템 전체를 다시 작성하지 않고는 해결이 불가능하다.

    // public 타입을 가변으로 만들면 내부 데이터를 변경할수 있게 되어 불필요한 방어적 복사를 유발한다.
    // 컴포지션으로 해결할수 있음에도 상속 방식으로 설계한 public 클래스는 상위 클래스에 영원히 종속되며 그 성능 제약을 물려받는다.
    // -> 더 빠른 구현체가 나오더라도 이용하지 못하게 된다.

    // 결론 : 성능을 배제 하는것이 아니라 염두해 두지만 빠른 프로그램 보단 좋은 프로그램을 만들려고 해야 하며
    // 성능 측정을 해보고 개선해야 한다면 프로파일러를 사용해 문제의 원인이 되는 지점을 찾아 최적화를 진행하고 성능 측정을 하여 비교한다.
}
