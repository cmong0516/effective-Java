package chapter12.item86;

public class Item86 {
    // Serializable 을 구현할지는 신중히 생각하라.

    // 클래스를 직렬화 하려면 클래스 선언에 implements Serializable 만 붙이면 된다.

    // 간단하게 적요할수 있지만 신경쓸게 매우 많다.
    // 1. Serializable 을 구현하면 릴리스한 뒤에는 수정하기 어렵다.
    // 2. 객체는 생성자를 사용해 만드는게 기본이지만 직렬화를 통해 기본 메커니즘을 우회하는 생성 기법이 생긴것으로 버그와 보안 구멍이 생길 위험이 높아진다.
    // 3. 새로운 버전을 릴리즈 할때 신버전 인스턴스를 직렬화 한후 구버전으로 역직렬화 할수 있는지 모두 테스트 해주어야 한다.
    // 4. 상속용으로 설계된 클래스는 대부분 Serializable 을 구현하면 안되며 인터페이스도 대부분 확장해서는 안된다.
        // 4-1. 상속용으로 설계된 클래스중 Serializable 을 구현한 예로 Throwable , Component 가 있다.
    // 5. 내부 크래스는 직렬화를 구현하지 말아야 한다.

    // 만약 클래스의 인스턴스 필드가 직렬화와 확장이 모두 가능하고 인스턴스 필드 값 중 불변식을 보장해야 할것이 있다면 finalize 메서드를 재정의 하여 final 로 선언하여 finalizer 공격을 방어 해야 한다.
        // finalize 공격이란 GC가 객체를 수거할때 동작하는 finalize 메서드를 오버라이딩 하여 로직을 수행하게 하는 공격
}
